---
# common tasks needed for interactions with aws
- name: Ensure VPC
  ec2_vpc:
    state: present
    wait: yes
    cidr_block: 10.0.0.0/16
    resource_tags: { "Name": "Dimagi Demo", "Environment": "Demonstration" }
    region: "{{ region }}"
    subnets:
      - cidr: 10.0.1.0/24
        az: "{{ region }}a"
        resource_tags: { "Name": "Dimagi Demo", "Environment": "Demonstration", "Tier": "Webhosts"}
      - cidr: 10.0.2.0/24
        az: "{{ region }}b"
        resource_tags: { "Name": "Dimagi Demo", "Environment": "Demonstration", "Tier": "DB"}
      - cidr: 10.0.3.0/24
        az: "{{ region }}c"
        resource_tags: { "Name": "Dimagi Demo", "Environment": "Demonstration", "Tier": "DB"}
  register: vpc

- name: Get all subnets from vpc
  set_fact:
    vpc_subnets: "{{ vpc.subnets }}"

- name: Group Subnets by Tier
  set_fact:
    grouped_vpc_subnets: "{{ vpc_subnets|dictby('resource_tags.Tier') }}"

- name: Ensure Webserver Security Group
  ec2_group:
    name: WebserverSecurityGroup
    description: firewall rules for webserver instances
    region: "{{ region }}"
    vpc_id: "{{ vpc.vpc_id }}"
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      # this is not a good idea, but here for proof of concept
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      # allow any communications at all from servers in this same group
      - proto: all
        group_name: WebserverSecurityGroup
      # allow postgresql communications from servers in the rds security group
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_name: RDSSecurityGroup
        group_desc: firewall rules for rds instances
  register: ws_rules

- name: Set webserver_security_group
  set_fact:
    webserver_security_group: "{{ ws_rules.group_id }}"

- name: Ensure RDS Database Security Group
  ec2_group:
    name: RDSSecurityGroup
    region: "{{ region }}"
    description: firewall rules for rds instances
    vpc_id: "{{ vpc.vpc_id }}"
    rules:
      - proto: all
        group_name: WebserverSecurityGroup
        group_desc: firewall rules for webserver instances
      - proto: all
        group_name: RDSSecurityGroup
    rules_egress:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
  register: rds_rules

- name: Set rds_security_group
  set_fact:
    rds_security_group: "{{ rds_rules.group_id }}"
